from flask import Flask
from config import (
    AUTO_CLEAN_DATA,
    AUTO_MERGE_DATA,
    AUTO_PREPARE_TRAINING_DATASET,
    AUTO_GENERATE_SYNTHETIC_DATA,
    AUTO_AUGMENT_SYNTHETIC_DATA,
    AUTO_CLEAN_TRAINING_DATA,
    AUTO_TRAIN_RANDOM_FOREST,
    AUTO_TRAIN_NAIVE_BAYES,
    AUTO_TRAIN_LOGISTIC_REGRESSION,
    AUTO_TRAIN_LSTM
)


# Fonctions d'entra√Ænement des mod√®les, d√©plac√©es depuis app/models/__init__.py
def train_random_forest():
    """
    Lance le script d'entra√Ænement pour le mod√®le Random Forest.
    """
    try:
        from app.models.train_random_forest import main as rf_train
        rf_train()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement du Random Forest : {e}")

def train_naive_bayes():
    """
    Lance le script d'entra√Ænement pour le mod√®le Naive Bayes.
    """
    try:
        from app.models.train_naive_bayes import main as nb_train
        nb_train()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement du Naive Bayes : {e}")

def train_logistic_regression():
    """
    Lance le script d'entra√Ænement pour le mod√®le de R√©gression Logistique.
    """
    try:
        from app.models.train_logistic_regression import main as lr_train
        lr_train()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement de la R√©gression Logistique : {e}")

def train_lstm():
    """
    Lance le script d'entra√Ænement pour le mod√®le LSTM.
    """
    try:
        from app.models.train_lstm import main as lstm_train
        lstm_train()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement du LSTM : {e}")


def run_training_if_enabled():
    """
    Lance l'entra√Ænement des mod√®les si les flags correspondants
    sont activ√©s dans config.py.
    """
    if AUTO_TRAIN_RANDOM_FOREST:
        print("Lancement de l'entra√Ænement du mod√®le Random Forest...")
        train_random_forest()

    if AUTO_TRAIN_NAIVE_BAYES:
        print("Lancement de l'entra√Ænement du mod√®le Naive Bayes...")
        train_naive_bayes()

    if AUTO_TRAIN_LOGISTIC_REGRESSION:
        print("Lancement de l'entra√Ænement du mod√®le de R√©gression Logistique...")
        train_logistic_regression()

    if AUTO_TRAIN_LSTM:
        print("Lancement de l'entra√Ænement du mod√®le LSTM...")
        train_lstm()


def create_app():
    app = Flask(__name__)
    app.config.from_object('config')

    with app.app_context():
        if AUTO_CLEAN_DATA:
            try:
                from app.services.clean_contacts import clean_contacts
                from app.services.clean_conversations import clean_conversations
                from app.services.clean_messages import clean_messages

                print("üßπ Nettoyage automatique des CSV vers JSON...")
                clean_contacts()
                clean_conversations()
                clean_messages()
                print("‚úÖ Nettoyage termin√©.")
            except Exception as e:
                print(f"‚ùå Erreur nettoyage automatique : {e}")

        if AUTO_MERGE_DATA:
            try:
                from app.services import merge_all
                print("üîó Fusion automatique des JSON...")
                merge_all.run()
                print("‚úÖ Fusion termin√©e.")
            except Exception as e:
                print(f"‚ùå Erreur fusion automatique : {e}")

        if AUTO_PREPARE_TRAINING_DATASET:
            try:
                from app.services import prepare_training_dataset
                print("üî¨ Pr√©paration du dataset de formation...")
                prepare_training_dataset.run()
                print("‚úÖ Pr√©paration termin√©e.")
            except Exception as e:
                print(f"‚ùå Erreur pr√©paration dataset : {e}")

        # Vous pouvez utiliser ce flag pour la g√©n√©ration initiale
        if AUTO_GENERATE_SYNTHETIC_DATA:
            try:
                from app.services import generate_synthetic_data
                print("ü§ñ G√©n√©ration de conversations synth√©tiques initiales...")
                generate_synthetic_data.run()
                print("‚úÖ G√©n√©ration initiale termin√©e.")
            except Exception as e:
                print(f"‚ùå Erreur g√©n√©ration de donn√©es synth√©tiques : {e}")

        # Nouveau bloc pour l'enrichissement du dataset
        if AUTO_AUGMENT_SYNTHETIC_DATA:
            try:
                from app.services import augment_synthetic_data
                print("üìà Enrichissement du dataset de conversations synth√©tiques...")
                augment_synthetic_data.run()
                print("‚úÖ Enrichissement termin√©.")
            except Exception as e:
                print(f"‚ùå Erreur enrichissement du dataset : {e}")

        # Nouveau bloc pour le nettoyage du dataset de formation
        if AUTO_CLEAN_TRAINING_DATA:
            try:
                from app.services import clean_training_data
                print("‚ú® Nettoyage automatique du dataset de formation...")
                clean_training_data.run()
                print("‚úÖ Nettoyage du dataset termin√©.")
            except Exception as e:
                print(f"‚ùå Erreur lors du nettoyage du dataset : {e}")

        # Lancement de l'entra√Ænement des mod√®les si les flags sont activ√©s
        try:
            print("üß† V√©rification et lancement de l'entra√Ænement des mod√®les...")
            run_training_if_enabled()
            print("‚úÖ Processus d'entra√Ænement termin√©.")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'entra√Ænement des mod√®les : {e}")

    # C'est la ligne qui a √©t√© corrig√©e.
    from app.routes.main import main_bp
    app.register_blueprint(main_bp)

    return app
